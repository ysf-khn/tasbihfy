// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Better Auth models
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  emailVerified Boolean @default(false)
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  accounts  Account[]
  sessions  Session[]
  dhikrs    Dhikr[]
  dhikrSessions DhikrSession[]
  dailyProgress DailyProgress[]
  prayerLocation PrayerLocation?
  reminderPreferences ReminderPreferences?
}

model Account {
  id          String  @id @default(cuid())
  accountId   String
  providerId  String
  userId      String
  password    String?
  accessToken String?
  refreshToken String?
  idToken     String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model verification {
  id         String   @id @default(cuid())
  identifier String
  value      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
}

// Dhikr App models
model Dhikr {
  id             String   @id @default(cuid())
  userId         String
  name           String
  targetCount    Int
  isFavorite     Boolean  @default(false)
  arabicText     String?  @db.Text
  transliteration String? @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions DhikrSession[]
  dailyProgress DailyProgress[]

  @@index([userId])
  @@index([userId, isFavorite])
}

model DhikrSession {
  id           String    @id @default(cuid())
  dhikrId      String
  userId       String
  currentCount Int       @default(0)
  completed    Boolean   @default(false)
  startedAt    DateTime  @default(now())
  completedAt  DateTime?
  updatedAt    DateTime  @updatedAt

  // Relations
  dhikr Dhikr @relation(fields: [dhikrId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([dhikrId])
}

model DailyProgress {
  id           String   @id @default(cuid())
  userId       String
  dhikrId      String
  date         DateTime @default(now()) @db.Date
  targetCount  Int
  currentCount Int      @default(0)
  completed    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  dhikr Dhikr @relation(fields: [dhikrId], references: [id], onDelete: Cascade)

  @@unique([userId, dhikrId, date])
  @@index([userId, date])
  @@index([dhikrId])
}

// Prayer Times models
model PrayerLocation {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String   // e.g., "London", "New York"
  latitude    String
  longitude   String
  timezone    String?
  country     String?
  countryCode String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model PrayerTimeCache {
  id               String   @id @default(cuid())
  locationQuery    String   // location parameter used in API call
  date             DateTime @db.Date
  fajr             String
  shurooq          String
  dhuhr            String
  asr              String
  maghrib          String
  isha             String
  qiblaDirection   String?
  latitude         String?
  longitude        String?
  timezone         String?
  country          String?
  countryCode      String?
  temperature      String?
  pressure         String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([locationQuery, date])
  @@index([date])
  @@index([locationQuery])
}

model ReminderPreferences {
  id                String    @id @default(cuid())
  userId            String    @unique
  reminderEnabled   Boolean   @default(false)
  reminderTime      String    @default("09:00") // HH:mm format
  timezone          String    @default("UTC")
  pushSubscription  Json?     // Store endpoint, p256dh, auth keys
  lastReminderSent  DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}
